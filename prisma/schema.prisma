generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Messenger

model MessengerJoin {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String?
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@unique([guildId, channelId])
  @@index([guildId])
}

model MessengerRole {
  id        Int      @id @default(autoincrement())
  guildId   String
  roleId    String
  channelId String?
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@unique([roleId, channelId])
  @@index([roleId])
  @@index([guildId])
}

model MessengerBoost {
  id        Int      @id @default(autoincrement())
  guildId   String
  channelId String?
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@unique([guildId, channelId])
  @@index([guildId])
}

// Reaction Roles

model ReactionRole {
  id        Int              @id @default(autoincrement())
  guildId   String
  roleId    String
  channelId String
  messageId String
  emojiName String
  emojiId   String?
  type      ReactionRoleType
  expireAt  DateTime?
  createdAt DateTime         @default(now())

  join ReactionRoleJoined?

  @@unique([messageId, emojiName, emojiId])
  @@index([guildId])
  @@index([roleId])
  @@index([messageId])
}

enum ReactionRoleType {
  STATIC
  DYNAMIC
}

model ReactionRoleJoinSettings {
  id          Int    @id @default(autoincrement())
  guildId     String
  description String @db.Text
  expireDelay Int

  @@unique([guildId])
}

model ReactionRoleJoin {
  id         Int      @id @default(autoincrement())
  guildId    String
  roleId     String
  emojiName  String
  emojiId    String?
  isAnimated Boolean
  name       String
  order      Int
  updatedAt  DateTime @updatedAt
  createdAt  DateTime @default(now())

  joins ReactionRoleJoined[]

  @@unique([emojiName, emojiId])
  @@index([guildId])
  @@index([roleId])
}

model ReactionRoleJoined {
  joinId         Int
  reactionRoleId Int

  join         ReactionRoleJoin @relation(fields: [joinId], references: [id])
  reactionRole ReactionRole     @relation(fields: [reactionRoleId], references: [id])

  @@id([joinId, reactionRoleId])
  @@unique([reactionRoleId])
  @@index([joinId])
}
